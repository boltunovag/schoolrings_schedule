import os
import telebot
from telebot import types
import time
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

AUDIO_DIR = "audio_files"
SCHEDULE_FILE = "schedule.txt"
CRON_FILE = "audio_schedule.cron"
os.makedirs(AUDIO_DIR, exist_ok=True)

# --- –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π ---
class LessonEvent:
    def __init__(self, lesson_num, event_type, time, audio_file):
        self.lesson_num = lesson_num
        self.event_type = event_type  # 'start' –∏–ª–∏ 'end'
        self.time = time  # 'hh:mm'
        self.audio_file = audio_file  # –∏–º—è —Ñ–∞–π–ª–∞

# --- –†–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ---
def load_events():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    events = []
    if not os.path.exists(SCHEDULE_FILE):
        return events
        
    try:
        with open(SCHEDULE_FILE, 'r') as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) == 4:
                    event_type, lesson_num, time, audio_file = parts
                    events.append(LessonEvent(lesson_num, event_type, time, audio_file))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    return events


def save_events(events):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π —Å–æ–±—ã—Ç–∏–π
    lesson_records = {}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞ –∏ —Ç–∏–ø—É
    for event in events:
        key = (event.lesson_num, event.event_type)
        lesson_records[key] = event
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ —É—Ä–æ–∫–æ–≤
    with open(SCHEDULE_FILE, 'w') as f:
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–æ–≤
        for key in sorted(lesson_records.keys()):
            if key[1] == 'start':
                event = lesson_records[key]
                line = f"{event.event_type} {event.lesson_num} {event.time} {event.audio_file}\n"
                f.write(line)
        
        # –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤
        for key in sorted(lesson_records.keys()):
            if key[1] == 'end':
                event = lesson_records[key]
                line = f"{event.event_type} {event.lesson_num} {event.time} {event.audio_file}\n"
                f.write(line)

        
# --- –ù–µ–Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞
def clear_schedule():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        if os.path.exists(SCHEDULE_FILE):
            os.remove(SCHEDULE_FILE)
        if os.path.exists(CRON_FILE):
            os.remove(CRON_FILE)
        os.system("crontab -r 2>/dev/null")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
        return False

# --- –†–∞–±–æ—Ç–∞ —Å cron ---
def generate_cron_jobs(events):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç crontab —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"""
    if not os.path.exists(AUDIO_DIR):
        os.makedirs(AUDIO_DIR, exist_ok=True)
    
    cron_content = "# –ê—É–¥–∏–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
    cron_content += f"# Audio dir: {AUDIO_DIR}\n\n"
    
    for event in sorted(events, key=lambda x: x.time):
        try:
            audio_path = os.path.join(AUDIO_DIR, event.audio_file)
            if not os.path.exists(audio_path):
                raise FileNotFoundError(f"Audio file {audio_path} not found")
            
            hour, minute = event.time.split(':')
            cron_content += (
                f"{minute} {hour} * * 1-5 "
                f"/usr/bin/mpg123 '{audio_path}' "
                f">>{AUDIO_DIR}/cron.log 2>&1\n"
            )
        except Exception as e:
            print(f"Error processing event {event.lesson_num}: {str(e)}")
            continue
    
    return cron_content

def install_cron_jobs():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ crontab"""
    try:
        events = load_events()
        if not events:
            return False, "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        
        cron_content = generate_cron_content(events)
        with open(CRON_FILE, 'w') as f:
            f.write(cron_content)
        
        exit_code = os.system(f"crontab {CRON_FILE}")
        return exit_code == 0, "Cron-–∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!" if exit_code == 0 else "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ crontab"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/add_lesson')
    btn2 = types.KeyboardButton('/show_schedule')
    btn3 = types.KeyboardButton('/install_cron')
    btn4 = types.KeyboardButton('/clear')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(
        message.chat.id,
        "üìÖ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_lesson - –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫\n"
        "/show_schedule - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/install_cron - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cron\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        reply_markup=markup
    )

@bot.message_handler(commands=['show_schedule'])
def show_schedule(message):
    events = load_events()
    if not events:
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
        return
    
    response = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
    for event in events:
        response += f"–£—Ä–æ–∫ {event.lesson_num}: {'–ù–∞—á–∞–ª–æ' if event.event_type == 'start' else '–ö–æ–Ω–µ—Ü'} –≤ {event.time}\n"
    bot.send_message(message.chat.id, response)

_unused='''@bot.message_handler(commands=['clear'])
    if clear_schedule():
        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ crontab –æ—á–∏—â–µ–Ω—ã")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")'''

@bot.message_handler(commands=['install_cron'])
def handle_install_cron(message):
    success, result = install_cron_jobs()
    if success:
        with open(CRON_FILE, 'rb') as f:
            bot.send_document(
                message.chat.id,
                f,
                caption=f"‚úÖ {result}"
            )
    else:
        bot.send_message(message.chat.id, f"‚ùå {result}")

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ ---
@bot.message_handler(commands=['add_lesson'])
def add_lesson(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:")
    bot.register_next_step_handler(msg, process_lesson_number)

def process_lesson_number(message):
    try:
        lesson_num = message.text.strip()
        if not lesson_num.isdigit():
            raise ValueError("–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
        msg = bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_num}. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (hh:mm):")
        bot.register_next_step_handler(msg, process_start_time, lesson_num)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_start_time(message, lesson_num):
    try:
        start_time = message.text.strip()
        if ':' not in start_time or len(start_time.split(':')) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hh:mm")
            
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞:")
        bot.register_next_step_handler(msg, process_start_audio, lesson_num, start_time)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_start_audio(message, lesson_num, start_time):
    try:
        if not (message.audio or message.voice):
            raise ValueError("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        file_ext = "ogg" if message.voice else message.audio.file_name.split('.')[-1]
        file_name = f"lesson_{lesson_num}_start_{int(time.time())}.{file_ext}"
        
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(os.path.join(AUDIO_DIR, file_name), 'wb') as f:
            f.write(downloaded_file)
            
        events = load_events()
        events.append(LessonEvent(lesson_num, "start", start_time, file_name))
        
        msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_num} (hh:mm):")
        bot.register_next_step_handler(msg, process_end_time, lesson_num, events)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_end_time(message, lesson_num, events):
    try:
        end_time = message.text.strip()
        if ':' not in end_time or len(end_time.split(':')) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hh:mm")
            
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞:")
        bot.register_next_step_handler(msg, process_end_audio, lesson_num, end_time, events)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_end_audio(message, lesson_num, end_time, events):
    try:
        if not (message.audio or message.voice):
            raise ValueError("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        file_ext = "ogg" if message.voice else message.audio.file_name.split('.')[-1]
        file_name = f"lesson_{lesson_num}_end_{int(time.time())}.{file_ext}"
        
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(os.path.join(AUDIO_DIR, file_name), 'wb') as f:
            f.write(downloaded_file)
            
        events.append(LessonEvent(lesson_num, "end", end_time, file_name))
        save_events(events)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –£—Ä–æ–∫ {lesson_num} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞—á–∞–ª–æ: {events[-2].time}\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()

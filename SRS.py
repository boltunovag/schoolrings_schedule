import os
import telebot
from telebot import types
import time
from dotenv import load_dotenv
import json
import logging
import re

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
AUDIO_DIR = "audio_files"
SCHEDULE_FILE = "schedule.txt"
CRON_FILE = "audio_schedule.cron"
SETTINGS_FILE = "settings.json"
CRON_BACKUP_FILE = "cron_backup.txt"
os.makedirs(AUDIO_DIR, exist_ok=True)

# --- –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π ---
class LessonEvent:
    def __init__(self, lesson_num, event_type, time, audio_file):
        self.lesson_num = lesson_num
        self.event_type = event_type
        self.time = time
        self.audio_file = audio_file

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    filename='bot_errors.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filemode='a'
)

# --- –†–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ---
def load_events():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    events = []
    if not os.path.exists(SCHEDULE_FILE):
        return events
        
    try:
        with open(SCHEDULE_FILE, 'r') as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) == 4:
                    event_type, lesson_num, time, audio_file = parts
                    events.append(LessonEvent(lesson_num, event_type, time, audio_file))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
    return events

def save_events(events):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª"""
    lesson_records = {}
    
    for event in events:
        key = (event.lesson_num, event.event_type)
        lesson_records[key] = event
    
    with open(SCHEDULE_FILE, 'w') as f:
        for key in sorted(lesson_records.keys()):
            if key[1] == 'start':
                event = lesson_records[key]
                line = f"{event.event_type} {event.lesson_num} {event.time} {event.audio_file}\n"
                f.write(line)
        
        for key in sorted(lesson_records.keys()):
            if key[1] == 'end':
                event = lesson_records[key]
                line = f"{event.event_type} {event.lesson_num} {event.time} {event.audio_file}\n"
                f.write(line)

# --- –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ---
def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    default_settings = {
        "lesson_duration": 45,
        "cron_paused": False
    }
    try:
        with open(SETTINGS_FILE, 'r') as f:
            return {**default_settings, **json.load(f)}
    except:
        return default_settings

def save_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
    with open(SETTINGS_FILE, 'w') as f:
        json.dump(settings, f)

# --- –†–∞–±–æ—Ç–∞ —Å cron ---
def generate_cron_jobs(events):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç crontab —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"""
    if not os.path.exists(AUDIO_DIR):
        os.makedirs(AUDIO_DIR, exist_ok=True)
    
    abs_audio_dir = os.path.abspath(AUDIO_DIR)
    cron_log = os.path.join(abs_audio_dir, 'cron.log')
    
    cron_content = "# –ê—É–¥–∏–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
    
    for event in sorted(events, key=lambda x: x.time):
        try:
            audio_path = os.path.join(abs_audio_dir, event.audio_file)
            if not os.path.exists(audio_path):
                raise FileNotFoundError(f"Audio file {audio_path} not found")
            
            hour, minute = event.time.split(':')
            cron_content += (
                f"{minute} {hour} * * 1-5 "
                f"/usr/bin/mpg123 '{audio_path}' "
                f">>{cron_log} 2>&1\n"
            )
        except Exception as e:
            logging.error(f"Error processing event {event.lesson_num}: {str(e)}")
    
    return cron_content

def install_cron_jobs():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ crontab"""
    try:
        events = load_events()
        if not events:
            return False, "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        
        cron_content = generate_cron_jobs(events)
        with open(CRON_FILE, 'w') as f:
            f.write(cron_content)
        
        exit_code = os.system(f"crontab {CRON_FILE}")
        return exit_code == 0, "Cron-–∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!" if exit_code == 0 else "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ crontab"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cron: {str(e)}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('/add_lesson'),
        types.KeyboardButton('/show_schedule'),
        types.KeyboardButton('/settings')
    ]
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id,
        "üìÖ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_lesson - –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫\n"
        "/show_schedule - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=markup
    )


################################–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è##################################################

@bot.message_handler(commands=['show_schedule'])
def show_schedule(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –Ω–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        events = load_events()
        
        if not events:
            bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —É—Ä–æ–∫–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        lessons = {}
        for event in events:
            if event.lesson_num not in lessons:
                lessons[event.lesson_num] = {'start': None, 'end': None}
            
            if event.event_type == 'start':
                lessons[event.lesson_num]['start'] = {
                    'time': event.time,
                    'audio': event.audio_file
                }
            elif event.event_type == 'end':
                lessons[event.lesson_num]['end'] = {
                    'time': event.time,
                    'audio': event.audio_file
                }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        schedule_text = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        for lesson_num in sorted(lessons.keys(), key=lambda x: int(x)):
            lesson = lessons[lesson_num]
            schedule_text += (
                f"–£—Ä–æ–∫ {lesson_num}:\n"
                f"  üîî –ù–∞—á–∞–ª–æ: {lesson['start']['time']} (–∞—É–¥–∏–æ: {lesson['start']['audio']})\n"
                f"  üîï –ö–æ–Ω–µ—Ü: {lesson['end']['time']} (–∞—É–¥–∏–æ: {lesson['end']['audio']})\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ cron
        cron_status = get_cron_status()
        schedule_text += f"\n–°—Ç–∞—Ç—É—Å cron: {cron_status}"
        
        bot.send_message(message.chat.id, schedule_text)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def get_cron_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å cron –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ crontab
        cron_output = os.popen("crontab -l 2>&1").read()
        
        if "no crontab" in cron_output.lower():
            return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
        events = load_events()
        if not events:
            return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ—Ç –Ω–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π)"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ crontab
        our_entries = 0
        for event in events:
            if f"mpg123 '{os.path.join(os.path.abspath(AUDIO_DIR), event.audio_file)}'" in cron_output:
                our_entries += 1
        
        settings = load_settings()
        if settings.get("cron_paused", False):
            return f"–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {our_entries}/{len(events)*2})"
        
        return f"–ê–∫—Ç–∏–≤–µ–Ω (–Ω–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {our_entries}/{len(events)*2})"
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ cron: {str(e)}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
################################–ö–æ–Ω–µ—Ü –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è##################################################

@bot.message_handler(commands=['settings'])
def settings_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = [
        types.KeyboardButton('1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞'),
        types.KeyboardButton('2. –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤–æ–Ω–∫–∏'),
        types.KeyboardButton('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤–æ–Ω–∫–∏'),
        types.KeyboardButton('/start')
    ]
    markup.add(*buttons)
    
    settings = load_settings()
    status = "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" if settings["cron_paused"] else "–∞–∫—Ç–∏–≤–Ω—ã"
    
    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"1. –¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞: {settings['lesson_duration']} –º–∏–Ω\n"
        f"2. –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–æ–≤: {status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.message_handler(func=lambda message: message.text == '1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞')
def set_lesson_duration(message):
    msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏—Ç—Å—è —É—Ä–æ–∫? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120):")
    bot.register_next_step_handler(msg, process_lesson_duration)

def process_lesson_duration(message):
    try:
        duration = int(message.text)
        if not 1 <= duration <= 120:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 –º–∏–Ω—É—Ç")
            
        settings = load_settings()
        settings["lesson_duration"] = duration
        save_settings(settings)
        
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {duration} –º–∏–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        settings_menu(message)

@bot.message_handler(func=lambda message: message.text == '2. –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤–æ–Ω–∫–∏')
def pause_cron(message):
    try:
        with open(CRON_BACKUP_FILE, 'w') as f:
            f.write(os.popen("crontab -l").read())
        os.system("crontab -r")
        
        settings = load_settings()
        settings["cron_paused"] = True
        save_settings(settings)
        
        bot.send_message(message.chat.id, "‚úÖ –ó–≤–æ–Ω–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. Cron –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        settings_menu(message)

@bot.message_handler(func=lambda message: message.text == '3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤–æ–Ω–∫–∏')
def resume_cron(message):
    try:
        if os.path.exists(CRON_BACKUP_FILE):
            os.system(f"crontab {CRON_BACKUP_FILE}")
            status = "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            install_cron_jobs()
            status = "–∑–∞–ø—É—â–µ–Ω—ã (–Ω–æ–≤—ã–µ)"
            
        settings = load_settings()
        settings["cron_paused"] = False
        save_settings(settings)
        
        bot.send_message(message.chat.id, f"‚úÖ –ó–≤–æ–Ω–∫–∏ {status}. Cron –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        settings_menu(message)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ process_lesson_number, 
# process_start_time, process_start_audio, process_end_time, 
# process_end_audio –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
current_lessons = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É—Ä–æ–∫–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

@bot.message_handler(commands=['add_lesson'])
def add_lesson(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):")
    bot.register_next_step_handler(msg, process_lesson_number)

def process_lesson_number(message):
    try:
        lesson_num = message.text.strip()
        if not lesson_num.isdigit():
            raise ValueError("–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —É—Ä–æ–∫–∞
        current_lessons[message.chat.id] = {
            'lesson_num': lesson_num,
            'start': None,
            'end': None
        }
        
        msg = bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_num}. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):")
        bot.register_next_step_handler(msg, process_start_time)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)

def process_start_time(message):
    try:
        time_str = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'^\d{1,2}:\d{2}$', time_str):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            
        hour, minute = map(int, time_str.split(':'))
        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            
        current_lessons[message.chat.id]['start_time'] = time_str
        
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∑–≤–æ–Ω–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ —É—Ä–æ–∫–∞:")
        bot.register_next_step_handler(msg, process_start_audio)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)

def process_start_audio(message):
    try:
        if not message.audio and not message.document:
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            
        file_info = None
        if message.audio:
            file_info = bot.get_file(message.audio.file_id)
        elif message.document:
            file_info = bot.get_file(message.document.file_id)
            
        if not file_info:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª")
            
        downloaded_file = bot.download_file(file_info.file_path)
        file_ext = os.path.splitext(file_info.file_path)[1]
        filename = f"start_{current_lessons[message.chat.id]['lesson_num']}{file_ext}"
        filepath = os.path.join(AUDIO_DIR, filename)
        
        with open(filepath, 'wb') as f:
            f.write(downloaded_file)
            
        current_lessons[message.chat.id]['start_audio'] = filename
        
        settings = load_settings()
        duration = settings['lesson_duration']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞
        start_time = current_lessons[message.chat.id]['start_time']
        h, m = map(int, start_time.split(':'))
        end_h = h + (m + duration) // 60
        end_m = (m + duration) % 60
        end_time = f"{end_h:02d}:{end_m:02d}"
        
        current_lessons[message.chat.id]['end_time'] = end_time
        
        msg = bot.send_message(
            message.chat.id,
            f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {end_time}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∑–≤–æ–Ω–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü —É—Ä–æ–∫–∞:"
        )
        bot.register_next_step_handler(msg, process_end_audio)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)

def process_end_audio(message):
    try:
        if not message.audio and not message.document:
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            
        file_info = None
        if message.audio:
            file_info = bot.get_file(message.audio.file_id)
        elif message.document:
            file_info = bot.get_file(message.document.file_id)
            
        if not file_info:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª")
            
        downloaded_file = bot.download_file(file_info.file_path)
        file_ext = os.path.splitext(file_info.file_path)[1]
        filename = f"end_{current_lessons[message.chat.id]['lesson_num']}{file_ext}"
        filepath = os.path.join(AUDIO_DIR, filename)
        
        with open(filepath, 'wb') as f:
            f.write(downloaded_file)
            
        current_lessons[message.chat.id]['end_audio'] = filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        lesson_data = current_lessons[message.chat.id]
        events = load_events()
        
        events.append(LessonEvent(
            lesson_num=lesson_data['lesson_num'],
            event_type='start',
            time=lesson_data['start_time'],
            audio_file=lesson_data['start_audio']
        ))
        
        events.append(LessonEvent(
            lesson_num=lesson_data['lesson_num'],
            event_type='end',
            time=lesson_data['end_time'],
            audio_file=lesson_data['end_audio']
        ))
        
        save_events(events)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –£—Ä–æ–∫ {lesson_data['lesson_num']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n"
            f"–ù–∞—á–∞–ª–æ: {lesson_data['start_time']}\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {lesson_data['end_time']}"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del current_lessons[message.chat.id]
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        start(message)
        
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
import os
import telebot
from telebot import types
import time
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

AUDIO_DIR = "audio_files"
SCHEDULE_FILE = "schedule.txt"
CRON_FILE = "audio_schedule.cron"
SETTINGS_FILE = "settings.json"          # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
CRON_BACKUP_FILE = "cron_backup.txt"     # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è cron
os.makedirs(AUDIO_DIR, exist_ok=True)

# --- –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π ---
class LessonEvent:
    def __init__(self, lesson_num, event_type, time, audio_file):
        self.lesson_num = lesson_num
        self.event_type = event_type  # 'start' –∏–ª–∏ 'end'
        self.time = time  # 'hh:mm'
        self.audio_file = audio_file  # –∏–º—è —Ñ–∞–π–ª–∞

import logging

logging.basicConfig(
    filename='bot_errors.log',
    level=logging.INFO,  # –ò–∑–º–µ–Ω–∏–ª –Ω–∞ INFO —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filemode='a'  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
)

# --- –†–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ---

def load_events():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    events = []
    if not os.path.exists(SCHEDULE_FILE):
        return events
        
    try:
        with open(SCHEDULE_FILE, 'r') as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) == 4:
                    event_type, lesson_num, time, audio_file = parts
                    events.append(LessonEvent(lesson_num, event_type, time, audio_file))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    return events


def save_events(events):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π —Å–æ–±—ã—Ç–∏–π
    lesson_records = {}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞ –∏ —Ç–∏–ø—É
    for event in events:
        key = (event.lesson_num, event.event_type)
        lesson_records[key] = event
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ —É—Ä–æ–∫–æ–≤
    with open(SCHEDULE_FILE, 'w') as f:
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–æ–≤
        for key in sorted(lesson_records.keys()):
            if key[1] == 'start':
                event = lesson_records[key]
                line = f"{event.event_type} {event.lesson_num} {event.time} {event.audio_file}\n"
                f.write(line)
        
        # –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤
        for key in sorted(lesson_records.keys()):
            if key[1] == 'end':
                event = lesson_records[key]
                line = f"{event.event_type} {event.lesson_num} {event.time} {event.audio_file}\n"
                f.write(line)


# --- –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ---
def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    default_settings = {
        "lesson_duration": 45,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 45 –º–∏–Ω—É—Ç
        "cron_paused": False
    }
    try:
        with open(SETTINGS_FILE, 'r') as f:
            import json
            return {**default_settings, **json.load(f)}
    except:
        return default_settings

def save_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
    with open(SETTINGS_FILE, 'w') as f:
        import json
        json.dump(settings, f)
        
# --- –ù–µ–Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞
def clear_schedule():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        if os.path.exists(SCHEDULE_FILE):
            os.remove(SCHEDULE_FILE)
        if os.path.exists(CRON_FILE):
            os.remove(CRON_FILE)
        os.system("crontab -r 2>/dev/null")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
        return False

# --- –†–∞–±–æ—Ç–∞ —Å cron ---
def generate_cron_jobs(events):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç crontab —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"""
    if not os.path.exists(AUDIO_DIR):
        os.makedirs(AUDIO_DIR, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ
    abs_audio_dir = os.path.abspath(AUDIO_DIR)
    cron_log = os.path.join(abs_audio_dir, 'cron.log')
    
    cron_content = "# –ê—É–¥–∏–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
    cron_content += f"# Audio dir: {abs_audio_dir}\n\n"
    
    for event in sorted(events, key=lambda x: x.time):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            audio_path = os.path.join(abs_audio_dir, event.audio_file)
            print(f"DEBUG: Audio path: {audio_path}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            if not os.path.exists(audio_path):
                raise FileNotFoundError(f"Audio file {audio_path} not found")
            
            hour, minute = event.time.split(':')
            cron_content += (
                f"{minute} {hour} * * 1-5 "
                f"/usr/bin/mpg123 '{audio_path}' "
                f">>{cron_log} 2>&1\n"
            )
        except Exception as e:
            print(f"Error processing event {event.lesson_num}: {str(e)}")
            continue
    
    return cron_content

def install_cron_jobs():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ crontab"""
    try:
        events = load_events()
        if not events:
            return False, "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        
        cron_content = generate_cron_jobs(events)
        with open(CRON_FILE, 'w') as f:
            f.write(cron_content)
        
        exit_code = os.system(f"crontab {CRON_FILE}")
        return exit_code == 0, "Cron-–∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!" if exit_code == 0 else "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ crontab"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('/add_lesson'),
        types.KeyboardButton('/show_schedule'),
        types.KeyboardButton('/install_cron'),
        types.KeyboardButton('/clear'),
        types.KeyboardButton('/settings')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id,
        "üìÖ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_lesson - –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫\n"
        "/show_schedule - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/install_cron - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cron\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=markup
    )

@bot.message_handler(commands=['cancel'])
def cancel(message):
    start(message)

@bot.message_handler(commands=['show_schedule'])
def show_schedule(message):
    events = load_events()
    if not events:
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
        return
    
    response = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
    for event in events:
        response += f"–£—Ä–æ–∫ {event.lesson_num}: {'–ù–∞—á–∞–ª–æ' if event.event_type == 'start' else '–ö–æ–Ω–µ—Ü'} –≤ {event.time}\n"
    bot.send_message(message.chat.id, response)

_unused='''@bot.message_handler(commands=['clear'])
    if clear_schedule():
        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ crontab –æ—á–∏—â–µ–Ω—ã")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")'''

@bot.message_handler(commands=['install_cron'])
def handle_install_cron(message):
    success, result = install_cron_jobs()
    if success:
        with open(CRON_FILE, 'rb') as f:
            bot.send_document(
                message.chat.id,
                f,
                caption=f"‚úÖ {result}"
            )
    else:
        bot.send_message(message.chat.id, f"‚ùå {result}")

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ ---
@bot.message_handler(commands=['add_lesson'])
def add_lesson(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:")
    bot.register_next_step_handler(msg, process_lesson_number)

# –í process_lesson_number:
def process_lesson_number(message):
    try:
        if not message.text:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞")
            
        lesson_num = message.text.strip()
        if not lesson_num.isdigit():
            raise ValueError("–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
        msg = bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_num}. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (hh:mm):")
        bot.register_next_step_handler(msg, process_start_time, lesson_num)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ

# –í process_start_time –∏ process_end_time:

def validate_time(time_str):
    try:
        hh, mm = map(int, time_str.split(':'))
        return 0 <= hh < 24 and 0 <= mm < 60
    except:
        return False
    


def process_start_time(message, lesson_num):
    try:
        if not message.text:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm")
            
        start_time = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not validate_time(start_time):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: HH:MM (00:00-23:59)")
            
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞:")
        bot.register_next_step_handler(msg, process_start_audio, lesson_num, start_time)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        add_lesson(message)  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞


# –í process_start_audio –∏ process_end_audio:

def process_start_audio(message, lesson_num, start_time):
    try:
        os.makedirs(AUDIO_DIR, exist_ok=True)

        if not (message.audio or message.voice or message.text):
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")

        if message.text and message.text.strip().lower() == '/cancel':
            return start(message)

        if not (message.audio or message.voice):
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª")

        file_id = message.voice.file_id if message.voice else message.audio.file_id
        file_ext = "ogg" if message.voice else message.audio.file_name.split('.')[-1]
        file_name = f"lesson_{lesson_num}_start_{int(time.time())}.{file_ext}"

        bot.send_chat_action(message.chat.id, 'upload_audio')
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)        

        if len(downloaded_file) > 10 * 1024 * 1024:
            raise ValueError("–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10MB)")

        file_path = os.path.join(AUDIO_DIR, file_name)
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)

        if not os.path.exists(file_path):
            raise IOError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")

        msg = bot.send_message(message.chat.id, 
                               f"–ê—É–¥–∏–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_num} (hh:mm):")
        bot.register_next_step_handler(msg, process_end_time, lesson_num, start_time, file_name)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /add_lesson"
        bot.send_message(message.chat.id, error_msg)
        logging.error(f"Error in process_start_audio: {str(e)}", exc_info=True)

def process_end_time(message, lesson_num, start_time, start_audio_file):
    try:
        if not message.text:  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞")
            
        end_time = message.text.strip()
        if not validate_time(end_time):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: HH:MM (00:00-23:59)")
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ —É—Ä–æ–∫–∞
        events = load_events()
        events.append(LessonEvent(lesson_num, "start", start_time, start_audio_file))
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞:")
        bot.register_next_step_handler(msg, process_end_audio, lesson_num, end_time, events)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)

def process_end_audio(message, lesson_num, end_time, events):
    try:
        if not (message.audio or message.voice or message.text):
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            
        if message.text and message.text.strip().lower() == '/cancel':
            return start(message)
            
        if not (message.audio or message.voice):
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª")

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å - –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
        bot.send_chat_action(message.chat.id, 'upload_audio')  # <-- –í–û–¢ –¢–£–¢
            
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        file_ext = "ogg" if message.voice else message.audio.file_name.split('.')[-1]
        file_name = f"lesson_{lesson_num}_end_{int(time.time())}.{file_ext}"
        
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        audio_path = os.path.join(AUDIO_DIR, file_name)
        with open(audio_path, 'wb') as f:
            bot.send_chat_action(message.chat.id, 'upload_document')  # –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫
            f.write(downloaded_file)        
            
        events.append(LessonEvent(lesson_num, "end", end_time, file_name))
        save_events(events)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –£—Ä–æ–∫ {lesson_num} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞—á–∞–ª–æ: {events[-2].time}\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /install_cron"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)
        
"""–ù–æ–≤—ã–π –∫–æ–¥"""
# --- –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
@bot.message_handler(commands=['settings'])
def settings_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = [
        types.KeyboardButton('1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞'),
        types.KeyboardButton('2. –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤–æ–Ω–∫–∏'),
        types.KeyboardButton('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤–æ–Ω–∫–∏'),
        types.KeyboardButton('/start')
    ]
    markup.add(*buttons)
    
    settings = load_settings()
    status = "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" if settings["cron_paused"] else "–∞–∫—Ç–∏–≤–Ω—ã"
    
    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"1. –¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞: {settings['lesson_duration']} –º–∏–Ω\n"
        f"2. –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–æ–≤: {status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.message_handler(func=lambda message: message.text == '1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞')
def set_lesson_duration(message):
    msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏—Ç—Å—è —É—Ä–æ–∫? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120):")
    bot.register_next_step_handler(msg, process_lesson_duration)

def process_lesson_duration(message):
    try:
        duration = int(message.text)
        if not 1 <= duration <= 120:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 –º–∏–Ω—É—Ç")
            
        settings = load_settings()
        settings["lesson_duration"] = duration
        save_settings(settings)
        
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {duration} –º–∏–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        settings_menu(message)

@bot.message_handler(func=lambda message: message.text == '2. –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤–æ–Ω–∫–∏')
def pause_cron(message):
    try:
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ cron
        with open(CRON_BACKUP_FILE, 'w') as f:
            f.write(os.popen("crontab -l").read())
        os.system("crontab -r")
        
        settings = load_settings()
        settings["cron_paused"] = True
        save_settings(settings)
        
        bot.send_message(message.chat.id, "‚úÖ –ó–≤–æ–Ω–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. Cron –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        settings_menu(message)

@bot.message_handler(func=lambda message: message.text == '3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤–æ–Ω–∫–∏')
def resume_cron(message):
    try:
        if os.path.exists(CRON_BACKUP_FILE):
            os.system(f"crontab {CRON_BACKUP_FILE}")
            status = "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            install_cron_jobs()
            status = "–∑–∞–ø—É—â–µ–Ω—ã (–Ω–æ–≤—ã–µ)"
            
        settings = load_settings()
        settings["cron_paused"] = False
        save_settings(settings)
        
        bot.send_message(message.chat.id, f"‚úÖ –ó–≤–æ–Ω–∫–∏ {status}. Cron –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        settings_menu(message)
#________________________________________________

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()

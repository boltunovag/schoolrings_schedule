import os
import telebot
from telebot import types
import time
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

AUDIO_DIR = "audio_files"
CRON_FILE = "audio_schedule.cron"
os.makedirs(AUDIO_DIR, exist_ok=True)

# --- –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π ---
class LessonEvent:
    def __init__(self, lesson_num, event_type, time, audio_file):
        self.lesson_num = lesson_num
        self.event_type = event_type  # 'start' –∏–ª–∏ 'end'
        self.time = time  # 'hh:mm'
        self.audio_file = audio_file  # –∏–º—è —Ñ–∞–π–ª–∞

# --- –†–∞–±–æ—Ç–∞ —Å cron ---
def generate_cron_content(events):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ cron-—Ñ–∞–π–ª–∞"""
    content = "# –ê—É–¥–∏–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
    for event in events:
        if event.event_type == "start":
            hour, minute = event.time.split(':')
            audio_path = os.path.join(AUDIO_DIR, event.audio_file)
            content += f"{minute} {hour} * * 1-5 /usr/bin/mpg123 '{audio_path}' >/dev/null 2>&1\n"
    return content

def install_cron_jobs(events):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ crontab"""
    try:
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cron_content = generate_cron_content(events)
        with open(CRON_FILE, 'w') as f:
            f.write(cron_content)
        
        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º crontab
        os.system(f"crontab {CRON_FILE}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        exit_code = os.system("crontab -l > /dev/null 2>&1")
        return exit_code == 0
        
    except Exception as e:
        print(f"Cron error: {str(e)}")
        return False

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üìÖ –ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏–æ—É—Ä–æ–∫–æ–≤\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_lesson - –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫\n"
        "/show_schedule - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/install_cron - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cron-–∑–∞–¥–∞–Ω–∏—è"
    )

@bot.message_handler(commands=['install_cron'])
def handle_install_cron(message):
    events = load_events()  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if not events:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return
    
    if install_cron_jobs(events):
        bot.send_message(message.chat.id, "‚úÖ Cron-–∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        with open(CRON_FILE, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ crontab")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cron. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞.")

# --- –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ ---
# (–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–µ)
# –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –≤—ã–∑—ã–≤–∞–µ–º:
# install_cron_jobs(updated_events)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
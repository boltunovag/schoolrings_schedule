import os
import telebot
from telebot import types
from datetime import datetime
import time
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PASSWORD = os.getenv("BOT_PASSWORD")

bot = telebot.TeleBot(TOKEN)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
AUDIO_DIR = "audio_files"
SCHEDULE_FILE = "schedule.txt"
os.makedirs(AUDIO_DIR, exist_ok=True)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_data = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
authorized_users = {}  # –°–ª–æ–≤–∞—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –ö–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
class LessonEvent:
    def __init__(self, lesson_number, event_type, time, audio_file):
        self.lesson_number = lesson_number
        self.event_type = event_type  # 'start' –∏–ª–∏ 'end'
        self.time = time  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "hh:mm"
        self.audio_file = audio_file  # –ò–º—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

def validate_time(time_str):
    try:
        hours, minutes = map(int, time_str.split(':'))
        return 0 <= hours < 24 and 0 <= minutes < 60
    except:
        return False

def time_to_minutes(time_str):
    h, m = map(int, time_str.split(':'))
    return h * 60 + m

def save_audio_file(file_id, file_name):
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    save_path = os.path.join(AUDIO_DIR, file_name)
    with open(save_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    return save_path

def validate_events(events):
    if not events:
        return False, "–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç"
    
    lesson_numbers = set(ev.lesson_number for ev in events)
    for num in lesson_numbers:
        starts = [e for e in events if e.lesson_number == num and e.event_type == "start"]
        ends = [e for e in events if e.lesson_number == num and e.event_type == "end"]
        if len(starts) != 1 or len(ends) != 1:
            return False, f"–î–ª—è —É—Ä–æ–∫–∞ {num} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –Ω–∞—á–∞–ª–æ –∏ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü"
    
    sorted_events = sorted(events, key=lambda x: (int(x.lesson_number), x.event_type))
    prev_end_time = 0
    prev_lesson = 0
    
    for ev in sorted_events:
        current_time = time_to_minutes(ev.time)
        current_lesson = int(ev.lesson_number)
        
        if current_lesson == prev_lesson:
            continue
        
        if current_lesson > prev_lesson + 1:
            return False, f"–ü—Ä–æ–ø—É—â–µ–Ω —É—Ä–æ–∫ {prev_lesson + 1}"
        
        if current_lesson > prev_lesson and current_time < prev_end_time:
            return False, (f"–û—à–∏–±–∫–∞ –ø–æ—Ä—è–¥–∫–∞: —É—Ä–æ–∫ {current_lesson} (–≤—Ä–µ–º—è {ev.time}) "
                          f"–Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ {prev_lesson}")
        
        if ev.event_type == "end":
            prev_end_time = current_time
            prev_lesson = current_lesson
    
    return True, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

def save_schedule_to_file(events):
    try:
        with open(SCHEDULE_FILE, 'w', encoding='utf-8') as f:
            for ev in sorted(events, key=lambda x: (int(x.lesson_number), x.event_type)):
                line = f"{ev.event_type} {ev.lesson_number} {ev.time} {ev.audio_file}\n"
                f.write(line)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return False

def load_schedule_from_file():
    if not os.path.exists(SCHEDULE_FILE):
        return []
    
    events = []
    try:
        with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                parts = line.split(maxsplit=3)
                if len(parts) != 4:
                    continue
                event_type, lesson_num, time, audio_file = parts
                events.append(LessonEvent(lesson_num, event_type, time, audio_file))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    return events

def format_schedule(events):
    if not events:
        return "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ."
    
    sorted_events = sorted(events, key=lambda x: (int(x.lesson_number), x.event_type))
    result = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
    current_lesson = None
    
    for ev in sorted_events:
        if ev.lesson_number != current_lesson:
            result += f"üîî –£—Ä–æ–∫ {ev.lesson_number}:\n"
            current_lesson = ev.lesson_number
        event_type = "üü¢ –ù–∞—á–∞–ª–æ" if ev.event_type == "start" else "üî¥ –ö–æ–Ω–µ—Ü"
        result += f"{event_type} –≤ {ev.time}\n"
    return result

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def ask_password(message):
    bot.send_message(message.chat.id, "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
    bot.register_next_step_handler(message, check_password)

def check_password(message):
    if message.text == PASSWORD:
        authorized_users[message.chat.id] = True
        bot.send_message(
            message.chat.id,
            "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_lesson - –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫\n"
            "/show_schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞"
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")

@bot.message_handler(commands=['help'])
def show_help(message):
    if message.chat.id not in authorized_users:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å! /start")
        return
    bot.send_message(
        message.chat.id,
        "üìå –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/add_lesson - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫\n"
        "/show_schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

@bot.message_handler(commands=['add_lesson'])
def start_adding_lesson(message):
    if message.chat.id not in authorized_users:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å! /start")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ (1-99):")
    bot.register_next_step_handler(msg, process_lesson_number)

def process_lesson_number(message):
    try:
        lesson_num = message.text.strip()
        if not lesson_num.isdigit() or not 1 <= int(lesson_num) <= 99:
            bot.send_message(message.chat.id, "‚ùå –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 99")
            return
        user_data[message.chat.id] = {'lesson_num': lesson_num}
        msg = bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_num} - –Ω–∞—á–∞–ª–æ:\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (hh:mm):")
        bot.register_next_step_handler(msg, process_start_time)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def process_start_time(message):
    try:
        start_time = message.text.strip()
        if not validate_time(start_time):
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hh:mm")
            return
        user_data[message.chat.id]['start_time'] = start_time
        msg = bot.send_message(
            message.chat.id,
            f"–£—Ä–æ–∫ {user_data[message.chat.id]['lesson_num']} - –Ω–∞—á–∞–ª–æ –≤ {start_time}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞:"
        )
        bot.register_next_step_handler(msg, process_start_audio)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def process_start_audio(message):
    try:
        if not (message.audio or message.voice):
            bot.send_message(message.chat.id, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        file_name = f"lesson_{user_data[message.chat.id]['lesson_num']}_start_{int(time.time())}.ogg"
        save_audio_file(file_id, file_name)
        user_data[message.chat.id]['start_audio'] = file_name
        msg = bot.send_message(
            message.chat.id,
            f"–£—Ä–æ–∫ {user_data[message.chat.id]['lesson_num']} - –∫–æ–Ω–µ—Ü:\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (hh:mm):"
        )
        bot.register_next_step_handler(msg, process_end_time)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def process_end_time(message):
    try:
        end_time = message.text.strip()
        if not validate_time(end_time):
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hh:mm")
            return
        start_time = user_data[message.chat.id]['start_time']
        if time_to_minutes(end_time) <= time_to_minutes(start_time):
            bot.send_message(message.chat.id, "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!")
            return
        user_data[message.chat.id]['end_time'] = end_time
        msg = bot.send_message(
            message.chat.id,
            f"–£—Ä–æ–∫ {user_data[message.chat.id]['lesson_num']} - –∫–æ–Ω–µ—Ü –≤ {end_time}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞:"
        )
        bot.register_next_step_handler(msg, process_end_audio)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def process_end_audio(message):
    try:
        if not (message.audio or message.voice):
            bot.send_message(message.chat.id, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        file_name = f"lesson_{user_data[message.chat.id]['lesson_num']}_end_{int(time.time())}.ogg"
        save_audio_file(file_id, file_name)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        lesson_num = user_data[message.chat.id]['lesson_num']
        start_event = LessonEvent(
            lesson_num,
            'start',
            user_data[message.chat.id]['start_time'],
            user_data[message.chat.id]['start_audio']
        )
        end_event = LessonEvent(
            lesson_num,
            'end',
            user_data[message.chat.id]['end_time'],
            file_name
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        events = load_schedule_from_file()
        events.extend([start_event, end_event])
        is_valid, msg_text = validate_events(events)
        
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {msg_text}")
            return
        
        if save_schedule_to_file(events):
            bot.send_message(
                message.chat.id,
                f"‚úÖ –£—Ä–æ–∫ {lesson_num} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üü¢ –ù–∞—á–∞–ª–æ: {start_event.time}\n"
                f"üî¥ –ö–æ–Ω–µ—Ü: {end_event.time}"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if message.chat.id in user_data:
            del user_data[message.chat.id]
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['show_schedule'])
def show_schedule(message):
    if message.chat.id not in authorized_users:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å! /start")
        return
    events = load_schedule_from_file()
    bot.send_message(message.chat.id, format_schedule(events))

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
